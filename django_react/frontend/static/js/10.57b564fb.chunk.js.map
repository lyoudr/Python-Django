{"version":3,"sources":["assets/icon/restaurant.svg","assets/icon/menu.svg","assets/icon/price.svg","assets/icon/rating.svg","assets/icon/distance.svg","content/search-restaurant/Restaurant/Restaurant.js","content/search-restaurant/search_restaurant.js"],"names":["module","exports","MapContainer","props","mapRef","React","createRef","state","currentLocation","lat","lng","storemarkers","selectedPlace","activeMarker","showingInfoWindow","centerMoved","bind","loadMapCenter","nearbySearch","onSelectedRes","this","prevProps","selectedRes","name","geometry","location","navigator","geolocation","getCurrentPosition","pos","coords","newLocation","Object","assign","latitude","longitude","setState","newResArr","pyrmont","google","maps","LatLng","map","Map","current","center","zoom","request","radius","type","places","PlacesService","results","status","PlacesServiceStatus","OK","i","length","push","setCenter","setRestaurant","mapProps","resName","new_storemarkers","item","isChoosed","marker","ref","style","height","onDragend","title","position","visible","index","key","onClick","onMarkerClick","icon","url","restaurantIcon","anchor","Point","scaledSize","Size","Component","GoogleApiWrapper","apiKey","process","REACT_APP_APIKEY","libraries","Search_Restaurant","restaurant_lists","rankResType","className","img","price","rating","distance","isOpenSide","isShowBar","isShowMenu","showMenu","chooseRestaurant","arr","sort","a","b","a_dis","Math","sqrt","pow","b_dis","sortFunc","restaurants","document","getElementById","scrollIntoView","restaurant","src","menu","alt","rankRestaurant","id","vicinity","price_level"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,wC,0CCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,kJCK9BC,G,OAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,OAASC,IAAMC,YACpB,EAAKC,MAAQ,CACXC,gBAAiB,CACfC,IAAK,KACLC,IAAK,MAEPC,aAAc,GACdC,cAAe,GACfC,aAAc,GACdC,mBAAmB,GAErB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBAhBJ,EADrB,gEAoBII,KAAKH,kBApBT,yCAsBqBI,GACjB,IAAIC,EAAcF,KAAKjB,MAAMmB,YACzBA,GAAgBD,EAAUC,cAAgBF,KAAKjB,MAAMmB,aACvDF,KAAKD,cAAcG,EAAYC,KAAMD,EAAYE,SAASC,SAAShB,MAAOa,EAAYE,SAASC,SAASf,SAzB9G,sCA6BmB,IAAD,OACVgB,WAAaA,UAAUC,aACzBD,UAAUC,YAAYC,oBAAmB,SAAAC,GACvC,IAAMC,EAASD,EAAIC,OACfC,EAAcC,OAAOC,OAAO,GAAI,EAAK1B,MAAMC,gBAAiB,CAACA,gBAAiB,CAAEC,IAAKqB,EAAOI,SAASxB,IAAKoB,EAAOK,aACrH,EAAKC,SAAS,CAAC5B,gBAAkBuB,IAAc,kBAAM,EAAKb,uBAlClE,qCAuCkB,IAAD,OACTmB,EAAY,GACVC,EAAU,IAAIlB,KAAKjB,MAAMoC,OAAOC,KAAKC,OAAOrB,KAAKb,MAAMC,gBAAgBC,IAAKW,KAAKb,MAAMC,gBAAgBE,KACvGgC,EAAM,IAAItB,KAAKjB,MAAMoC,OAAOC,KAAKG,IAAIvB,KAAKhB,OAAOwC,QAAS,CAC9DC,OAAQP,EACRQ,KAAM,KAEFC,EAAU,CACdtB,SAAUa,EACVU,OAAQ,MACRC,KAAM,CAAC,eAEO,IAAI7B,KAAKjB,MAAMoC,OAAOC,KAAKU,OAAOC,cAAcT,GACxDxB,aAAa6B,GAAS,SAACK,EAASC,GACtC,GAAIA,IAAW,EAAKlD,MAAMoC,OAAOC,KAAKU,OAAOI,oBAAoBC,GAAI,CACnE,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAClCnB,EAAUqB,KAAKN,EAAQI,IAEzB,EAAKpB,SAAS,CAAEzB,aAAc0B,IAEhC,EAAKlC,MAAMwD,UAAU,EAAKpD,MAAMC,iBAChC,EAAKL,MAAMyD,cAAc,EAAKrD,MAAMI,mBA5D1C,kCAiEckD,EAAUnB,GAAM,IAAD,OACzBtB,KAAKgB,SAAS,CACZ5B,gBAAiB,CACfC,IAAKiC,EAAIG,OAAOpC,MAChBC,IAAKgC,EAAIG,OAAOnC,SAEjB,kBAAM,EAAKQ,oBAvElB,oCA0EgB4C,EAAS5B,EAAUC,GAE/Bf,KAAKgB,SAAS,CACZ5B,gBAAiB,CACfC,IAAKyB,EACLxB,IAAKyB,KAIT,IAAM4B,EAAmB3C,KAAKb,MAAMI,aAAa+B,KAAI,SAACsB,GAEpD,OADAA,EAAKC,WAAY,EACbD,EAAKzC,OAASuC,GAChBE,EAAKC,WAAY,EACVD,GAEAA,KAGX5C,KAAKjB,MAAMyD,cAAcG,KA5F7B,oCA+FgB5D,EAAO+D,GACnB9C,KAAKgB,SAAS,CACZxB,cAAeT,EACfU,aAAcqD,EACdpD,mBAAmB,MAnGzB,+BAsGY,IAAD,OAIP,OACE,kBAAC,MAAD,CACEqD,IAAK/C,KAAKhB,OACVmC,OAAQnB,KAAKjB,MAAMoC,OACnBM,OAAQ,CACNpC,IAAKW,KAAKb,MAAMC,gBAAgBC,IAChCC,IAAKU,KAAKb,MAAMC,gBAAgBE,KAElCoC,KAAM,GACNsB,MAZU,CACZC,OAAQ,SAYNC,UAAW,SAACT,EAAUnB,GAAX,OAAmB,EAAK3B,YAAY8C,EAAUnB,KAEzD,kBAAC,SAAD,CACE6B,MAAK,gBACLC,SAAU,CAAE/D,IAAKW,KAAKb,MAAMC,gBAAgBC,IAAKC,IAAKU,KAAKb,MAAMC,gBAAgBE,OAEnF,kBAAC,aAAD,CACEwD,OAAQ9C,KAAKb,MAAMM,aACnB4D,QAASrD,KAAKb,MAAMO,mBAEpB,6BACE,2BAAIM,KAAKb,MAAMK,cAAc2D,SAGhCnD,KAAKb,MAAMI,aAAa+B,KAAI,SAACwB,EAAQQ,GAAT,OAC3B,kBAAC,SAAD,CACEC,IAAKT,EACLK,MAAOL,EAAO3C,KACdiD,SAAUN,EAAO1C,SAASC,SAC1BmD,QAAS,SAACzE,EAAO+D,GACf,EAAK/C,cAAchB,EAAMoE,MAAOL,EAAOM,SAAS/D,MAAOyD,EAAOM,SAAS9D,OACvE,EAAKmE,cAAc1E,EAAO+D,IAE5BY,KAAM,CACJC,IAAI,GAAD,OAAKC,KACRC,OAAQ,IAAI,EAAK9E,MAAMoC,OAAOC,KAAK0C,MAAM,GAAI,IAC7CC,WAAY,IAAI,EAAKhF,MAAMoC,OAAOC,KAAK4C,KAAK,GAAI,eA9I9D,GAAkC/E,IAAMgF,YAuJzBC,6BAAiB,CAC9BC,OAAO,GAAD,OAAKC,8SAAYC,kBACvBC,UAAW,CAAC,WAFCJ,CAGZpF,G,wECrJGyF,G,yDACJ,WAAYxF,GAAO,IAAD,8BAChB,cAAMA,IACDI,MAAQ,CACXqF,iBAAmB,GACnBC,YAAc,CACZ,CAACC,UAAW,QAAS7C,KAAM,cAAe8C,IAAKC,KAC/C,CAACF,UAAW,SAAU7C,KAAM,SAAU8C,IAAKE,KAC3C,CAACH,UAAW,WAAY7C,KAAM,WAAY8C,IAAKG,MAEjD5E,YAAc,KACdd,gBAAgB,CACdC,IAAM,KACNC,IAAM,MAERyF,YAAa,EACbC,UAAY,OACZC,WAAa,QAEf,EAAKzC,cAAgB,EAAKA,cAAc5C,KAAnB,gBACrB,EAAK2C,UAAY,EAAKA,UAAU3C,KAAf,gBACjB,EAAKsF,SAAW,EAAKA,SAAStF,KAAd,gBAChB,EAAKuF,iBAAmB,EAAKA,iBAAiBvF,KAAtB,gBArBR,E,uDAwBP,IAAD,OACRI,KAAKgB,SAAS,CAAC+D,YAAc/E,KAAKb,MAAM4F,aAAa,WACnD,EAAK/D,SAAS,CACZgE,UAAY,EAAK7F,MAAM4F,WAAa,OAAS,OAC7CE,WAAa,EAAK9F,MAAM4F,WAAa,OAAS,c,qCAMrClD,GAAM,IAAD,QACD,SAACuD,EAAKvD,GACrB,GAAY,gBAATA,GAAmC,WAATA,EAC3BuD,EAAIC,MAAK,SAACC,EAAGC,GACX,OAAGD,EAAEzD,GAAQ0D,EAAE1D,GACN,EAENyD,EAAEzD,GAAQ0D,EAAE1D,IACL,EAEH,UAEJ,GAAY,aAATA,EAAoB,CAC5B,IAAIxC,EAAM,EAAKF,MAAMC,gBAAgBC,IACjCC,EAAM,EAAKH,MAAMC,gBAAgBE,IACrC8F,EAAIC,MAAK,SAACC,EAAGC,GACX,IAAIC,EAAQC,KAAKC,KAAKD,KAAKE,IAAKL,EAAElF,SAASC,SAAShB,MAAQA,EAAM,GAAKoG,KAAKE,IAAKL,EAAElF,SAASC,SAASf,MAAQA,EAAM,IAC/GsG,EAAQH,KAAKC,KAAKD,KAAKE,IAAKJ,EAAEnF,SAASC,SAAShB,MAAQA,EAAM,GAAKoG,KAAKE,IAAKJ,EAAEnF,SAASC,SAASf,MAAQA,EAAM,IACnH,OAAGkG,EAAQI,EACF,EAENJ,EAAQI,GACD,EAEH,KAGX,EAAK5E,SAAS,CAACwD,iBAAmBY,IAEpCS,CAAS7F,KAAKb,MAAMqF,iBAAkB3C,K,gCAI9BzC,GACRY,KAAKgB,SAAS,CAAC5B,gBAAkBA,M,oCAIrB0G,GACZ9F,KAAKgB,SAAS,CAACwD,iBAAmBsB,IAC/BC,SAASC,eAAe,eACzBD,SAASC,eAAe,cAAcC,mB,uCAKzBC,GACflG,KAAKgB,SAAS,CAACd,YAAcgG,M,+BAGtB,IAAD,OACN,OACE,0BAAMxB,UAAU,cACd,yBAAKA,UAAS,eAAU1E,KAAKb,MAAM6F,WAC/BxB,QAAWxD,KAAKkF,UAClB,yBAAKiB,IAAKC,IAAMC,IAAI,SAEtB,yBAAK3B,UAAS,iBAAY1E,KAAKb,MAAM8F,aAClCjF,KAAKb,MAAMsF,YAAYnD,KAAI,SAACO,EAAMyB,GACjC,OACE,yBACEC,IAAO1B,EACP6C,UAAW7C,EAAK6C,UAChBlB,QAAS,EAAK8C,eAAe1G,KAAK,EAAzB,UAAkCiC,EAAKA,QAEhD,yBAAKsE,IAAKtE,EAAK8C,IAAK0B,IAAI,aAKhC,yBAAK3B,UAAU,oBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mCACZ1E,KAAKb,MAAMqF,iBAAiBlD,KAAI,SAAC4E,EAAY5C,GAC5C,OACE,yBACEC,IAAO2C,EACP1C,QAAW,EAAK2B,iBAAiBvF,KAAK,EAAMsG,GAC5CK,GAAML,EAAWrD,UAAY,aAAc,KAC3C6B,UAAWwB,EAAWrD,UAAY,SAAU,IAE5C,uBAAG6B,UAAU,QAAQpB,EAAQ,EAA7B,KAAkC4C,EAAW/F,MAC7C,uBAAGuE,UAAU,YAAYwB,EAAWM,UACpC,yBAAK9B,UAAU,gBACb,uBAAGA,UAAU,SAASwB,EAAWO,YAAjC,KACA,uBAAG/B,UAAU,UAAb,WAA+BwB,EAAWrB,cAMpD,yBAAKH,UAAU,6BACb,kBAAC,EAAD,CACElC,cAAiBxC,KAAKwC,cACtBD,UAAavC,KAAKuC,UAClBrC,YAAeF,KAAKb,MAAMe,sB,GAlIVjB,IAAMgF,YA4IvBM","file":"static/js/10.57b564fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/restaurant.d9af8db5.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu.c7ee1e62.svg\";","module.exports = __webpack_public_path__ + \"static/media/price.9c83ac6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/rating.11a01e16.svg\";","module.exports = __webpack_public_path__ + \"static/media/distance.27661887.svg\";","import React from 'react';\nimport { GoogleApiWrapper, Map, Marker, InfoWindow } from 'google-maps-react';\nimport restaurantIcon from '../../../assets/icon/restaurant.svg';\nimport './Restaurant.scss';\n\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.mapRef = React.createRef();\n    this.state = {\n      currentLocation: {\n        lat: null,\n        lng: null\n      },\n      storemarkers: [],\n      selectedPlace: {},\n      activeMarker: {},\n      showingInfoWindow: false\n    }\n    this.centerMoved = this.centerMoved.bind(this);\n    this.loadMapCenter = this.loadMapCenter.bind(this);\n    this.nearbySearch = this.nearbySearch.bind(this);\n    this.onSelectedRes = this.onSelectedRes.bind(this);\n  }\n  componentDidMount() {\n    this.loadMapCenter();\n  }\n  componentDidUpdate(prevProps) {\n    let selectedRes = this.props.selectedRes;\n    if (selectedRes && (prevProps.selectedRes !== this.props.selectedRes)) {\n      this.onSelectedRes(selectedRes.name, selectedRes.geometry.location.lat(), selectedRes.geometry.location.lng());\n    }\n  }\n  // load map Center\n  loadMapCenter() {\n    if (navigator && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        const coords = pos.coords;\n        let newLocation = Object.assign({}, this.state.currentLocation, {currentLocation: { lat: coords.latitude,lng: coords.longitude}});\n        this.setState({currentLocation : newLocation}, () => this.nearbySearch());\n      });\n    }\n  }\n  // Search surrounding restaurants\n  nearbySearch() {\n    let newResArr = [];\n    const pyrmont = new this.props.google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng);\n    const map = new this.props.google.maps.Map(this.mapRef.current, {\n      center: pyrmont,\n      zoom: 15\n    });;\n    const request = {\n      location: pyrmont,\n      radius: '500',\n      type: ['restaurant']\n    }\n    const service = new this.props.google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status) => {\n      if (status === this.props.google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          newResArr.push(results[i]);\n        }\n        this.setState({ storemarkers: newResArr });\n      }\n      this.props.setCenter(this.state.currentLocation);\n      this.props.setRestaurant(this.state.storemarkers);\n    });\n\n  }\n  // Modify Center when dragging map\n  centerMoved(mapProps, map) {\n    this.setState({\n      currentLocation: {\n        lat: map.center.lat(),\n        lng: map.center.lng()\n      }\n    }, () => this.nearbySearch());\n  }\n  // On Marker Click to interact with restaurant list\n  onSelectedRes(resName, latitude, longitude) {\n    // Set marker as center\n    this.setState({\n      currentLocation: {\n        lat: latitude,\n        lng: longitude\n      }\n    });\n    // Mark restaurant as active\n    const new_storemarkers = this.state.storemarkers.map((item) => {\n      item.isChoosed = false;\n      if (item.name === resName) {\n        item.isChoosed = true;\n        return item;\n      } else {\n        return item;\n      }\n    });\n    this.props.setRestaurant(new_storemarkers);\n  }\n  // Set InfoWindow when clicking marker\n  onMarkerClick(props, marker) {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    })\n  }\n  render() {\n    const style = {\n      height: '100vh'\n    }\n    return (\n      <Map\n        ref={this.mapRef}\n        google={this.props.google}\n        center={{\n          lat: this.state.currentLocation.lat,\n          lng: this.state.currentLocation.lng\n        }}\n        zoom={15}\n        style={style}\n        onDragend={(mapProps, map) => this.centerMoved(mapProps, map)}\n      >\n        <Marker\n          title={`Your location`}\n          position={{ lat: this.state.currentLocation.lat, lng: this.state.currentLocation.lng }}\n        />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n        >\n          <div>\n            <p>{this.state.selectedPlace.title}</p>\n          </div>\n        </InfoWindow>\n        {this.state.storemarkers.map((marker, index) =>\n          <Marker\n            key={marker}\n            title={marker.name}\n            position={marker.geometry.location}\n            onClick={(props, marker) => {\n              this.onSelectedRes(props.title, marker.position.lat(), marker.position.lng());\n              this.onMarkerClick(props, marker);\n            }}\n            icon={{\n              url: `${restaurantIcon}`,\n              anchor: new this.props.google.maps.Point(32, 32),\n              scaledSize: new this.props.google.maps.Size(12, 12)\n            }}\n          />\n        )}\n      </Map>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: `${process.env.REACT_APP_APIKEY}`,\n  libraries: ['places']\n})(MapContainer)","import React from 'react';\nimport GoogleApiWrapper from './Restaurant/Restaurant';\n// svg file\nimport menu from '../../assets/icon/menu.svg';\nimport price from '../../assets/icon/price.svg';\nimport rating from '../../assets/icon/rating.svg';\nimport distance from '../../assets/icon/distance.svg';\n// scss file\nimport './search_restaurant.scss';\n\nclass Search_Restaurant extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      restaurant_lists : [],\n      rankResType : [\n        {className: 'price', type: 'price_level', img: price},\n        {className: 'rating', type: 'rating', img: rating},\n        {className: 'distance', type: 'distance', img: distance},\n      ],\n      selectedRes : null,\n      currentLocation:{\n        lat : null,\n        lng : null\n      },\n      isOpenSide : false,\n      isShowBar : 'show',\n      isShowMenu : 'hide'\n    }\n    this.setRestaurant = this.setRestaurant.bind(this);\n    this.setCenter = this.setCenter.bind(this);\n    this.showMenu = this.showMenu.bind(this);\n    this.chooseRestaurant = this.chooseRestaurant.bind(this);\n  }\n  // Control sidebar display\n  showMenu(){\n    this.setState({isOpenSide : !this.state.isOpenSide}, () => {\n      this.setState({\n        isShowBar : this.state.isOpenSide ? 'hide' : 'show', \n        isShowMenu : this.state.isOpenSide ? 'show' : 'hide'\n      });\n    });\n  }\n\n  // Rank restaurant lists according to price, rating, and distance\n  rankRestaurant(type){\n    const sortFunc = (arr, type) => {\n      if(type === 'price_level' || type === 'rating'){\n        arr.sort((a, b) => {\n          if(a[type] > b[type]){\n            return 1;\n          }\n          if(a[type] < b[type]){\n            return -1;\n          }\n          return 0;\n        });\n      } else if(type === 'distance'){\n        let lat = this.state.currentLocation.lat;\n        let lng = this.state.currentLocation.lng;\n        arr.sort((a, b) => {\n          let a_dis = Math.sqrt(Math.pow((a.geometry.location.lat() - lat), 2) + Math.pow((a.geometry.location.lng() - lng), 2));\n          let b_dis = Math.sqrt(Math.pow((b.geometry.location.lat() - lat), 2) + Math.pow((b.geometry.location.lng() - lng), 2));\n          if(a_dis > b_dis){\n            return 1;\n          }\n          if(a_dis < b_dis){\n            return -1;\n          }\n          return 0;\n        });\n      }\n      this.setState({restaurant_lists : arr});\n    }\n    sortFunc(this.state.restaurant_lists, type);\n  }\n\n  // Set map center\n  setCenter(currentLocation){\n    this.setState({currentLocation : currentLocation});\n  }\n\n  // Set restaurant lists\n  setRestaurant(restaurants){\n    this.setState({restaurant_lists : restaurants});\n    if(document.getElementById('choosedRes')){\n      document.getElementById('choosedRes').scrollIntoView();\n    }\n  }\n\n  // Choose Restaurant in lists\n  chooseRestaurant(restaurant){\n    this.setState({selectedRes : restaurant});\n  }\n\n  render(){\n    return (\n      <main className=\"restaurant\">\n        <div className={`menu ${this.state.isShowBar}`} \n            onClick = {this.showMenu}>\n          <img src={menu} alt='img'/>\n        </div>\n        <div className={`select ${this.state.isShowMenu}`} >\n          {this.state.rankResType.map((type, index) => {\n            return(\n              <div \n                key = {type} \n                className={type.className} \n                onClick={this.rankRestaurant.bind(this, `${type.type}`)}\n              >\n                <img src={type.img} alt='img'/>\n              </div>\n            )\n          })}\n        </div>\n        <div className=\"container custom\">\n          <div className=\"row\">\n            <div className=\"col-md-4 col-12 restaurant_info\">\n              {this.state.restaurant_lists.map((restaurant, index) => {\n                return(\n                  <div\n                    key = {restaurant}\n                    onClick = {this.chooseRestaurant.bind(this, restaurant)} \n                    id = {restaurant.isChoosed ? 'choosedRes': null} \n                    className={restaurant.isChoosed ? 'active': ''}\n                  >\n                    <p className=\"name\">{index + 1}. {restaurant.name}</p>\n                    <p className=\"vicinity\">{restaurant.vicinity}</p>\n                    <div className=\"price_rating\">\n                      <p className=\"price\">{restaurant.price_level}$</p>\n                      <p className=\"rating\">Rating: {restaurant.rating}</p>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <div className=\"col-md-8 col-12 googlemap\">\n              <GoogleApiWrapper\n                setRestaurant = {this.setRestaurant}\n                setCenter = {this.setCenter}\n                selectedRes = {this.state.selectedRes}\n              />\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Search_Restaurant;\n"],"sourceRoot":""}